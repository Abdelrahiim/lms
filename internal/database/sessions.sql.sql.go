// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO user_sessions (
    id,
    user_id,
    refresh_token_hash,
    access_token_hash,
    device_name,
    device_type,
    browser,
    browser_version,
    os,
    os_version,
    ip_address,
    location,
    is_active,
    last_accessed_at,
    expires_at,
    revoked_at,
    revoked_reason,
    created_at
)
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18
)
RETURNING id, user_id, refresh_token_hash, access_token_hash, device_name, device_type, browser, browser_version, os, os_version, ip_address, location, is_active, last_accessed_at, expires_at, revoked_at, revoked_reason, created_at
`

type CreateSessionParams struct {
	ID               uuid.UUID             `json:"id"`
	UserID           uuid.UUID             `json:"userId"`
	RefreshTokenHash string                `json:"refreshTokenHash"`
	AccessTokenHash  sql.NullString        `json:"accessTokenHash"`
	DeviceName       sql.NullString        `json:"deviceName"`
	DeviceType       sql.NullString        `json:"deviceType"`
	Browser          sql.NullString        `json:"browser"`
	BrowserVersion   sql.NullString        `json:"browserVersion"`
	Os               sql.NullString        `json:"os"`
	OsVersion        sql.NullString        `json:"osVersion"`
	IpAddress        pqtype.Inet           `json:"ipAddress"`
	Location         pqtype.NullRawMessage `json:"location"`
	IsActive         sql.NullBool          `json:"isActive"`
	LastAccessedAt   sql.NullTime          `json:"lastAccessedAt"`
	ExpiresAt        time.Time             `json:"expiresAt"`
	RevokedAt        sql.NullTime          `json:"revokedAt"`
	RevokedReason    sql.NullString        `json:"revokedReason"`
	CreatedAt        sql.NullTime          `json:"createdAt"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.RefreshTokenHash,
		arg.AccessTokenHash,
		arg.DeviceName,
		arg.DeviceType,
		arg.Browser,
		arg.BrowserVersion,
		arg.Os,
		arg.OsVersion,
		arg.IpAddress,
		arg.Location,
		arg.IsActive,
		arg.LastAccessedAt,
		arg.ExpiresAt,
		arg.RevokedAt,
		arg.RevokedReason,
		arg.CreatedAt,
	)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshTokenHash,
		&i.AccessTokenHash,
		&i.DeviceName,
		&i.DeviceType,
		&i.Browser,
		&i.BrowserVersion,
		&i.Os,
		&i.OsVersion,
		&i.IpAddress,
		&i.Location,
		&i.IsActive,
		&i.LastAccessedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.RevokedReason,
		&i.CreatedAt,
	)
	return i, err
}
