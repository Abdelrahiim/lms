version: 2.1

orbs:
  docker: circleci/docker@2.6.0
  go: circleci/go@1.11.0

executors:
  go-executor:
    docker:
      - image: cimg/go:1.25.0
    environment:
      GO111MODULE: "on"
      GOPROXY: "https://proxy.golang.org,direct"
      GOSUMDB: "sum.golang.org"

jobs:
  security-scan-and-build:
    executor: go-executor
    steps:
      - checkout
      - go/load-cache
      - go/mod-download
      - run:
          name: Install security analysis tools
          command: |
            go install honnef.co/go/tools/cmd/staticcheck@latest
            go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
            go install golang.org/x/vuln/cmd/govulncheck@latest
      - run:
          name: Execute code security analysis
          command: |
            staticcheck ./...
            gosec -exclude=G101 -exclude-dir=internal/database ./...
            govulncheck ./...
      - run:
          name: Compile application using Makefile
          command: |
            make build

  build:
    executor: go-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
      - run:
          name: Build application
          command: |
            CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app ./cmd/server/main.go
      - run:
          name: Build Docker image
          command: |
            docker build -t ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} -f dockerfile .
            docker tag ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} ${CIRCLE_PROJECT_REPONAME}:latest

  publish:
    executor: go-executor
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
      - docker/check:
          docker-username: DOCKER_USERNAME
          docker-password: DOCKER_PASSWORD
      - run:
          name: Build and push Docker image
          command: |
            docker build -t $DOCKER_USERNAME/lms:${CIRCLE_SHA1} -f dockerfile .
            docker tag $DOCKER_USERNAME/lms:${CIRCLE_SHA1} $DOCKER_USERNAME/lms:latest
            docker push $DOCKER_USERNAME/lms:${CIRCLE_SHA1}
            docker push $DOCKER_USERNAME/lms:latest

  deploy-uat:
    executor: go-executor
    steps:
      - checkout
      - run:
          name: Deploy to UAT
          command: |
            echo "Deploying to UAT environment..."
            echo "Image: $DOCKER_USERNAME/lms:${CIRCLE_SHA1}"
            echo "Environment: UAT"
            # Add your actual UAT deployment commands here
            # Example: kubectl set image deployment/lms-app lms=$DOCKER_USERNAME/lms:${CIRCLE_SHA1}
            echo "Deployment completed successfully"

  deploy-prod:
    executor: go-executor
    steps:
      - checkout
      - run:
          name: Deploy to Production
          command: |
            echo "Deploying to Production environment..."
            echo "Image: $DOCKER_USERNAME/lms:${CIRCLE_SHA1}"
            echo "Environment: Production"
            # Add your actual production deployment commands here
            # Example: kubectl set image deployment/lms-app lms=$DOCKER_USERNAME/lms:${CIRCLE_SHA1}
            echo "Deployment completed successfully"

workflows:
  ci-cd-pipeline:
    jobs:
      - security-scan-and-build:
          filters:
            branches:
              ignore: /^(?!main$|develop$).*/
      - build:
          requires:
            - security-scan-and-build
          filters:
            branches:
              ignore: /^(?!main$|develop$).*/
      - publish:
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - develop
      - deploy-uat:
          requires:
            - publish
          filters:
            branches:
              only: develop
      - deploy-prod:
          requires:
            - publish
          filters:
            branches:
              only: main
          context:
            - production-deployment